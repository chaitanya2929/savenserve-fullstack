package com.klef.fsd.controller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.klef.fsd.model.Seller;
import com.klef.fsd.service.SellerService;

@RestController
@RequestMapping("/seller")
@CrossOrigin("*")
public class SellerController {

	@Autowired
	private SellerService sellerService;

	@PostMapping("/registration")
	public ResponseEntity<String> sellerRegistration(@RequestBody Seller seller) {
		try {
			String output = sellerService.sellerRegistration(seller);
			return ResponseEntity.ok(output);
		} catch (Exception e) {
			return ResponseEntity.status(500).body("Seller registration failed.");
		}
	}

	@PostMapping("/checksellerlogin")
	public ResponseEntity<?> checkSellerLogin(@RequestBody Seller seller) {
		Seller s = sellerService.checkSellerLogin(seller.getUsername(), seller.getPassword());
		if (s != null) {
			return ResponseEntity.ok(s);
		} else {
			return ResponseEntity.status(401).body("Invalid credentials or not approved.");
		}
	}

	@GetMapping("/pending")
	public ResponseEntity<List<Seller>> viewPendingSellers() {
		List<Seller> list = sellerService.viewPendingSellers();
		return ResponseEntity.ok(list);
	}

	@PutMapping("/approve/{id}")
	public ResponseEntity<String> approveSeller(@PathVariable("id") int id) {
		String result = sellerService.approveSeller(id);
		return ResponseEntity.ok(result);
	}
	
	@PutMapping("/reject/{id}")
	public ResponseEntity<String> rejectSeller(@PathVariable("id") int id) {
	    String result = sellerService.rejectSeller(id);
	    return ResponseEntity.ok(result);
	}

	@DeleteMapping("/delete")
	public ResponseEntity<String> deleteSeller(@RequestParam("id") int id) {
	    String result = sellerService.deleteSeller(id);
	    return ResponseEntity.ok(result);
	}
	
	@PutMapping("/updateseller")
	public ResponseEntity<String> sellerupdateprofile(@RequestBody Seller seller)
	   {
	 	  try
	 	   {
	 		  System.out.println(seller.toString());
	 		  String output = sellerService.updateSellerProfile(seller);
	 		  return ResponseEntity.ok(output);
	 	   }
	 	   catch(Exception e)
	 	   {
	 		    System.out.println(e.getMessage());
	 		    return ResponseEntity.status(500).body("Failed to Update Seller ... !!"); 
	 	   }
	   }
	@GetMapping("/viewallsellers")
	public List<Seller> viewAllSellers() {
		
		return sellerService.viewAllSellers();
				
	}
	
	
	
}
